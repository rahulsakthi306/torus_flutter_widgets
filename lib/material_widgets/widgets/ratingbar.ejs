<%_ let propName; _%>
<%_ let selectedValue; _%>
<%_ let validatorKey; _%>
<%_ let label; _%>
<%_ let code = data1[3]; _%>
import 'package:flutter/material.dart';

class <%= relation[0] %> extends StatelessWidget {
  final double rating; 
  final double size; 
  final Color? filledColor; 
  final Color? emptyColor; 

  const <%= relation[0] %>({
    super.key,
    <%_ if(data.elementInfo.props){ _%>
        <%_ data.elementInfo.props.forEach(prop => { _%>
          <%_
            propName = prop.name;
            selectedValue = prop.enum?.selectedValue;
            if(selectedValue && selectedValue.length > 0){
              selectedValue = prop.enum.selectedValue;
            } else{
              selectedValue = prop.default;
            }
          _%>
    <%_ if(prop.name === 'rating'){ _%>
        this.rating <%_ if(prop.value) {_%> = '<%= prop.value %>' <%_ } _%> ,
            <%_ } _%>
    <%_ if(prop.name === 'size'){ _%>
        this.size <%_ if(prop.value) {_%> = '<%= prop.value %>' <%_ } _%> ,
            <%_ } _%>                      
    <%_ if(prop.name === 'filledColor'){ _%>
        this.filledColor <%_ if(prop.value) {_%> = '<%= prop.value %>' <%_ } _%> ,
            <%_ } _%>
    <%_ if(prop.name === 'emptyColor'){ _%>
        this.emptyColor <%_ if(prop.value) {_%> = '<%= prop.value %>' <%_ } _%> ,
            <%_ } _%>            
    <%_ }); _%>
    <%_ } _%>
    this.rating = 5.0,
    this.size = 30.0,
  });

  @override
  Widget build(BuildContext context) {
    int fullStars = rating.floor();
    double fractionalStar = rating - fullStars;

    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: List.generate(5, (index) {
        if (index < fullStars) {
          return Icon(
            Icons.star,
            size: size,
            color: filledColor ?? Colors.yellow,
          );
        } else if (index == fullStars && fractionalStar > 0) {
          return Icon(
            Icons.star_half,
            size: size,
            color: filledColor ?? Colors.yellow,
          );
        } else {
          return Icon(
            Icons.star_border,
            size: size,
            color: emptyColor ?? Colors.grey,
          );
        }
      }),
    );
  }
}
